(*
FIXME FIXME we don't need this - just bind a std_plist_factory at top-level


(** Like {!Make_1} but with stdtypes. 

odoc documentation not great on this module - prefer #show in top-level. *)

(* open Plist_intf *)

(* open Plist_intf.Sh_std_ctxt *)

(** NOTE hidden include Plist_intf.Sh_std_ctxt, to make odoc output readable *)
(**/**)
include Pl_type_abbrevs
(**/**)

let plist_factory = Make_1.
    
let make ~(plist_marshal_info:'a plist_marshal_info)
  =
  Make_1.make ~plist_marshal_info ~buf_ops ~blk_ops |> fun x1 ->
  object
    method plist_marshal_ops=x1#plist_marshal_ops
    method with_=fun ~blk_dev_ops -> 
      x1#with ~monad_ops ~blk_dev_ops 
  ((plist_marshal_ops:'a plist_marshal_ops), `K1(fun ~(blk_dev_ops:blk_dev_ops') ->
       rest ~monad_ops ~blk_dev_ops |> fun (plist_extra_ops, `K2 rest) ->
       ((plist_extra_ops:'a plist_extra_ops), `K2(fun ~(with_state:(plist,t)with_state) -> 
            rest ~with_state |> fun (x:'a plist_ops) -> 
            x))))


let make : plist_marshal_info:'a plist_marshal_info ->
'a plist_marshal_ops *
[> `K1 of
     blk_dev_ops:blk_dev_ops' ->
     'a plist_extra_ops *
     [> `K2 of with_state:(plist, t) Tjr_monad.with_state -> 'a plist_ops ] ] = make
*)
